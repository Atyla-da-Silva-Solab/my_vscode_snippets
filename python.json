{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"from abc import ABC, abstractmethod": {
		"prefix": "iabc",
		"body": ["from abc import ABC, abstractmethod"],
		"description": "Import ABC and abstractmethod from abc module"
	},

	"New Abstract Base Class": {
		"prefix": "abc",
		"body": [
			"class ${1:ClassName}(ABC):",
			"\t# Constructor",
			"\tdef __init__(self):",
			"\t\tpass\n",
			"\t# Props",
			"\t@property\n\t@abstractmethod",
			"\tdef prop1(self) -> str:",
			"\t\tpass\n",
			"\t@property\n\t@abstractmethod",
			"\tdef prop2(self) -> str:",
			"\t\tpass\n",
			"\t@property\n\t@abstractmethod",
			"\tdef prop3(self) -> str:",
			"\t\tpass\n",
			"\t# Methods",
			"\t@abstractmethod",
			"\tdef method1(self) -> None:",
			"\t\tpass\n",
			"\t@abstractmethod",
			"\tdef method2(self) -> None:",
			"\t\tpass\n",
			"\t@abstractmethod",
			"\tdef method3(self) -> None:",
			"\t\tpass\n",
		],
		"description": "Defines a new Abstract Base Class"
	},

	"Import Dataclass Decorator": {
		"prefix": "datac",
		"description": "Declares a dataclass",
		"body": [
			"from dataclasses import dataclass\n\n",
			"@dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)",
			"class ${1:ClassName}():",
			"\t${2:field1}: ${3:str}",
			"\t${4:field2}: ${5:int}",
			"\t${6:field3}: ${7:list[str]}",
			"\t${8:field4}: ${9:dict[str, str]}",
			"\t${10:field5}: ${11:tuple[str, ...]}\n",
		]
	}
}
